apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    exclude '**/BuildConfig.java'
    excludes = ['**/*.kt'] // < ---- Exclude all kotlin files from javadoc file.
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

version android.defaultConfig.versionName
group 'com.itachi1706.appupdater'

afterEvaluate {
    Properties localProps = new Properties()
    def localPropFile = file('../local.properties')
    if (localPropFile.canRead()) { localProps.load(new FileInputStream(localPropFile)) }

    def ossrhUsername = localProps != null && localProps.containsKey('ossrhUsername') ? localProps.getProperty('ossrhUsername') : System.getenv('OSSRH_USER')
    def ossrhPassword = localProps != null && localProps.containsKey('ossrhPassword') ? localProps.getProperty('ossrhPassword') : System.getenv('OSSRH_PASSWORD')

    def ghUser = localProps != null && localProps.containsKey('gpr.user') ? localProps.getProperty('gpr.user') : System.getenv('GITHUB_ACTOR')
    def ghKey = localProps != null && localProps.containsKey('gpr.key') ? localProps.getProperty('gpr.key') : System.getenv('GITHUB_TOKEN')

    publishing {
        repositories {
            maven {
                def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotRepo : releaseRepo
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
            maven {
                name = "GHPackages"
                url = uri("https://maven.pkg.github.com/itachi1706/CheesecakeAppUpdater")
                credentials {
                    username = ghUser
                    password = ghKey
                }
            }
        }
        publications {
            aar(MavenPublication) {
                from components.release
                groupId = this.group
                artifactId = 'appupdater'
                version = this.version

                pom {
                    name = 'Cheesecake App Updater'
                    description = 'Internal Android App Updating Library'
                    url = 'https://github.com/itachi1706/CheesecakeAppUpdater'
                    inceptionYear = '2016'

                    packaging = 'aar'

                    licenses {
                        license {
                            name = 'The MIT License (MIT)'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    scm {
                        connection = 'https://github.com/itachi1706/CheesecakeAppUpdater.git'
                        url = 'https://github.com/itachi1706/CheesecakeAppUpdater'

                    }
                    developers {
                        developer {
                            id = 'itachi1706'
                            name = 'Kenneth'
                        }
                    }
                }

                // Tell maven to prepare the generated "*.aar" file for publishing
                artifact(sourcesJar)
                artifact(javadocJar)
            }
        }
    }

    signing {
        def signingKey = localProps != null && localProps.containsKey('signing.key') ? localProps.getProperty('signing.key') : System.getenv('GPG_SIGN_KEY')
        def signingPassword = localProps != null && localProps.containsKey('signing.password') ? localProps.getProperty('signing.password') : System.getenv('GPG_SIGN_PASSWORD')
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.aar
    }
}